<?xml version="1.0"?>
<!-- This is a launch file for an example on how to bringup of the race perception architecture-->
<launch>
<!-- this flag will configure the system to run with nodes or nodelets-->
<arg name="use_nodelets" default="0"/>
<arg name="use_standalone" default="false"/>
<!--<arg name="use_pr2" default="0"/>-->
<arg name="pdb_source" default="default_pdb"/>


<!--    <group if="$(arg use_standalone)">
        <arg name="pi/2" value="1.5707963267948966" />
        <arg name="optical_rotate" value="0 0 0 0 0 0" />
        <node pkg="tf" type="static_transform_publisher" name="standalone_static_tf_map_to_kinect"
            args="$(arg optical_rotate) /head_mount_kinect_rgb_optical_frame /map 30" />
    </group>-->


    <group ns="/perception">

	<!-- _________________________________-->
	<!--|                                 |-->
	<!--|             Memory 		      |-->
	<!--|_________________________________|-->

		<!--Launches a race_perception_db node(let) -->
	<include file="$(find race_perception_db)/launch/bringup.launch">
	    <arg name="use_nodelets" value="$(arg use_nodelets)" />
	    <arg name="pdb_source" value="$(arg pdb_source)" />
	    <arg name="name" value="perception_db" />
	</include>

	
	<!-- Launches the nodelet_manager -->
	<group if="$(arg use_nodelets)">
	    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" output="screen" required="true">
		<param name="num_worker_threads" value="10"/>
	    </node>
	</group>

	<!-- _________________________________-->
	<!--|                                 |-->
	<!--|           run network 	      |-->
	<!--|_________________________________|-->

	<!-- Be sure that you already run the proper deep learning service e.g., rosrun race_deep_learning_feature_extraction multi_view_xception_service_max_pooling.py -->
	<!-- it is a good idea to write a batch script to run network model first, wait for 10 secs and then run this launch file  -->

	<group ns="/pipeline1">
		
		<!-- _________________________________-->
		<!--|                                 |-->
		<!--|         Global Param            |-->
		<!--|_________________________________|-->


	<!-- set home_address parameter which represents the path of the dataset -->
	<!-- restaurant_object_dataset = "/datasets/restaurant_object_dataset/"; -->
	<!-- model_net_10_pcd = "/datasets/modelnet10/"; -->

	<arg name="home_address" default="/home/cor/datasets/restaurant_object_dataset/" />
	<param name="/perception/home_address" type="string" value = "$(arg home_address)"/>

	<!-- name of approach -->
	<arg name="name_of_approach" default="mobilenetV2_IBL" />
	<param name="/perception/name_of_approach" type="string" value = "$(arg name_of_approach)"/>

	<!-- name of approach -->
	<arg name="distance_function" default="euclidean" />
	<param name="/perception/distance_function" type="string" value = "$(arg distance_function)"/>


	<!-- The following network architectures have been implemeneted and can be used: 
		"/vgg16_service", "/vgg19_service", "/xception_service", "/resnet50_service", "/mobilenet_service", ...  
		..., "/densenet121_server", "/densenet169_server", "/densenet201_server", "/nasnet_large_server", "/nasnet_mobile_server", "/mobilenetV2_service", ... 
		..., "/inception_resnet_service",   "/inception_service"
	--> 
	
	<!-- deep_learning_architecture -->
	<arg name="deep_learning_architecture" default="/mobilenetV2_service" />
	<param name="/perception/deep_learning_architecture" type="string" value = "$(arg deep_learning_architecture)"/>


	<!-- modelnet_dataset 0 = FLASE, 1 = TRUE-->
	<arg name="modelnet_dataset" default="0" /> 
	<param name="/perception/modelnet_dataset" type="bool" value = "$(arg modelnet_dataset)"/>
	

	<!-- Image_normalization 0 = FLASE, 1 = TRUE-->
	<arg name="image_normalization" default="0" /> 
	<param name="/perception/image_normalization" type="bool" value = "$(arg image_normalization)"/>
	
	<!-- multiviews 0 = FLASE, 1 = TRUE-->
	<arg name="multiviews" default="1" /> 
	<param name="/perception/multiviews" type="bool" value = "$(arg multiviews)"/>
	
	<!-- max_pooling 0 = FLASE, 1 = TRUE; max_pooling or avg_pooling-->
	<arg name="max_pooling" default="1" /> 
	<param name="/perception/max_pooling" type="bool" value = "$(arg max_pooling)"/>
	
	<!-- DOWNSAMPLING 0 = FLASE, 1 = TRUE-->
	<arg name="downsampling_voxel_size" default="0.01" />
	<param name="/perception/downsampling_voxel_size" type="double" value = "$(arg downsampling_voxel_size)"/>
	
	<!-- DOWNSAMPLING 0 = FLASE, 1 = TRUE-->
	<arg name="downsampling" default="1" /> 
	<param name="/perception/downsampling" type="bool" value = "$(arg downsampling)"/>
	
	<!-- new shape descriptor params -->
	<arg name="adaptive_support_lenght" default="0" />
	<param name="/perception/adaptive_support_lenght" type="int" value = "$(arg adaptive_support_lenght)"/>
	
	<arg name="sign" default="1" />
	<param name="/perception/sign" type="int" value = "$(arg sign)"/>
	
	<!-- for large objects like ModelNet it could be 40 and for small objects like IEETA/Washington 20 -->
	<arg name="number_of_bins" default="150" />
	<param name="/perception/number_of_bins" type="int" value = "$(arg number_of_bins)"/>
	<arg name="global_image_width" default="0.2" />
	<param name="/perception/global_image_width" type="double" value = "$(arg global_image_width)"/>
			
	<arg name="off_line_flag" default="0" />
	<param name="/perception/off_line_flag" type="int" value = "$(arg off_line_flag)"/>

	<arg name="recognition_threshold" default="200000000000000" />
	<param name="/perception/recognition_threshold" type="double" value = "$(arg recognition_threshold)"/>
	
	
	
		<!-- ________________________________________-->
		<!--|                                       |-->
		<!--|   kfold_cross_validation_evaluation   |-->
		<!--|_______________________________________|-->
            
	    <include file="$(find rug_kfold_cross_validation)/launch/bringup_deep_learning_descriptor.launch">
            <arg name="use_nodelets" value="$(arg use_nodelets)" />
            <arg name="name" value="cross_validation" />
	    </include>		
		<!-- _________________________________-->
		<!--|                                 |-->
		<!--|       object_representation     |-->
		<!--|_________________________________|-->
		
		<!-- <include file="$(find race_object_descriptor)/launch/bringup.launch">
            <arg name="use_nodelets" value="$(arg use_nodelets)" />
            <arg name="name" value="object_descriptor" />
	    </include>-->
		<!-- _________________________________-->
		<!--|                                 |-->
		<!--|       object_recognition        |-->
		<!--|_________________________________|-->

		<!-- <include file="$(find race_deep_learning_based_object_recognition)/launch/bringup.launch">
            <arg name="use_nodelets" value="$(arg use_nodelets)" />
            <arg name="name" value="deep_learning_based_object_recognition" />
	    </include> -->



	</group>
	
    </group>

</launch>


